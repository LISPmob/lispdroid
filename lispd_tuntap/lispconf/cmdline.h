/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.2
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "lispconf"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "lispconf"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * add_entry_arg;	/**< @brief Add a map cache or db entry (default='db').  */
  char * add_entry_orig;	/**< @brief Add a map cache or db entry original value given at command line.  */
  const char *add_entry_help; /**< @brief Add a map cache or db entry help description.  */
  char * eid_arg;	/**< @brief EID in CIDR prefix notation <addr>/<len>.  */
  char * eid_orig;	/**< @brief EID in CIDR prefix notation <addr>/<len> original value given at command line.  */
  const char *eid_help; /**< @brief EID in CIDR prefix notation <addr>/<len> help description.  */
  char * rloc_arg;	/**< @brief RLOC as IP Address.  */
  char * rloc_orig;	/**< @brief RLOC as IP Address original value given at command line.  */
  const char *rloc_help; /**< @brief RLOC as IP Address help description.  */
  int priority_arg;	/**< @brief priority.  */
  char * priority_orig;	/**< @brief priority original value given at command line.  */
  const char *priority_help; /**< @brief priority help description.  */
  int weight_arg;	/**< @brief weight.  */
  char * weight_orig;	/**< @brief weight original value given at command line.  */
  const char *weight_help; /**< @brief weight help description.  */
  int ttl_arg;	/**< @brief Time-to-live in seconds.  */
  char * ttl_orig;	/**< @brief Time-to-live in seconds original value given at command line.  */
  const char *ttl_help; /**< @brief Time-to-live in seconds help description.  */
  char * print_arg;	/**< @brief Print EID table (default='cache').  */
  char * print_orig;	/**< @brief Print EID table original value given at command line.  */
  const char *print_help; /**< @brief Print EID table help description.  */
  char * filter_prefix_arg;	/**< @brief EID prefix filter.  */
  char * filter_prefix_orig;	/**< @brief EID prefix filter original value given at command line.  */
  const char *filter_prefix_help; /**< @brief EID prefix filter help description.  */
  char * list_arg;	/**< @brief List EIDs or RLOCS (default='eids').  */
  char * list_orig;	/**< @brief List EIDs or RLOCS original value given at command line.  */
  const char *list_help; /**< @brief List EIDs or RLOCS help description.  */
  char * interface_arg;	/**< @brief Specify a local interface as RLOC of LISP encapsulated packets.  */
  char * interface_orig;	/**< @brief Specify a local interface as RLOC of LISP encapsulated packets original value given at command line.  */
  const char *interface_help; /**< @brief Specify a local interface as RLOC of LISP encapsulated packets help description.  */
  const char *clear_help; /**< @brief Clear EID Map Cache help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int add_entry_given ;	/**< @brief Whether add-entry was given.  */
  unsigned int eid_given ;	/**< @brief Whether eid was given.  */
  unsigned int rloc_given ;	/**< @brief Whether rloc was given.  */
  unsigned int priority_given ;	/**< @brief Whether priority was given.  */
  unsigned int weight_given ;	/**< @brief Whether weight was given.  */
  unsigned int ttl_given ;	/**< @brief Whether ttl was given.  */
  unsigned int print_given ;	/**< @brief Whether print was given.  */
  unsigned int filter_prefix_given ;	/**< @brief Whether filter-prefix was given.  */
  unsigned int list_given ;	/**< @brief Whether list was given.  */
  unsigned int interface_given ;	/**< @brief Whether interface was given.  */
  unsigned int clear_given ;	/**< @brief Whether clear was given.  */

  int addmode_mode_counter; /**< @brief Counter for mode addmode */
  int clearcache_mode_counter; /**< @brief Counter for mode clearcache */
  int delmode_mode_counter; /**< @brief Counter for mode delmode */
  int listmode_mode_counter; /**< @brief Counter for mode listmode */
  int printmode_mode_counter; /**< @brief Counter for mode printmode */
  int rlocmode_mode_counter; /**< @brief Counter for mode rlocmode */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_add_entry_values[];  /**< @brief Possible values for add-entry. */
extern const char *cmdline_parser_print_values[];  /**< @brief Possible values for print. */
extern const char *cmdline_parser_list_values[];  /**< @brief Possible values for list. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
